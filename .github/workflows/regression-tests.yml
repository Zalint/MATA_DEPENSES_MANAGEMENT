name: Tests de Non-R√©gression

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  regression-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: bonea2024
          POSTGRES_USER: zalint
          POSTGRES_DB: mata_expenses_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: mata_expenses_test_db
      DB_USER: zalint
      DB_PASSWORD: bonea2024
      NODE_ENV: test

    steps:
    - name: üìã Checkout du code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: üì¶ Installation des d√©pendances
      run: npm ci

    - name: üèóÔ∏è Initialisation de la base de donn√©es de test
      run: |
        # Cr√©er les tables n√©cessaires pour les tests
        PGPASSWORD=$DB_PASSWORD psql -h localhost -U $DB_USER -d $DB_NAME -c "
        -- Table des utilisateurs
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(50) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            role VARCHAR(20) NOT NULL CHECK (role IN ('directeur', 'directeur_general', 'pca', 'admin')),
            full_name VARCHAR(100) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Table des comptes
        CREATE TABLE IF NOT EXISTS accounts (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
            account_name VARCHAR(100) NOT NULL,
            current_balance INTEGER DEFAULT 0 NOT NULL,
            total_credited INTEGER DEFAULT 0 NOT NULL,
            total_spent INTEGER DEFAULT 0 NOT NULL,
            created_by INTEGER REFERENCES users(id),
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            account_type VARCHAR(20) DEFAULT 'classique'
        );

        -- Table des d√©penses
        CREATE TABLE IF NOT EXISTS expenses (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
            account_id INTEGER REFERENCES accounts(id) ON DELETE CASCADE,
            amount INTEGER NOT NULL,
            description TEXT NOT NULL,
            expense_date DATE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            expense_type VARCHAR(50),
            category VARCHAR(100),
            designation TEXT,
            supplier VARCHAR(100),
            total INTEGER NOT NULL,
            selected_for_invoice BOOLEAN DEFAULT false
        );

        -- Table de l'historique des cr√©dits
        CREATE TABLE IF NOT EXISTS credit_history (
            id SERIAL PRIMARY KEY,
            account_id INTEGER REFERENCES accounts(id) ON DELETE CASCADE,
            credited_by INTEGER REFERENCES users(id),
            amount INTEGER NOT NULL,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Table des cr√©dits sp√©ciaux
        CREATE TABLE IF NOT EXISTS special_credit_history (
            id SERIAL PRIMARY KEY,
            account_id INTEGER REFERENCES accounts(id) ON DELETE CASCADE,
            credited_by INTEGER REFERENCES users(id),
            amount INTEGER NOT NULL,
            comment TEXT,
            credit_date DATE NOT NULL,
            is_balance_override BOOLEAN DEFAULT false,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Table de l'historique des transferts
        CREATE TABLE IF NOT EXISTS transfer_history (
            id SERIAL PRIMARY KEY,
            source_id INTEGER REFERENCES accounts(id),
            destination_id INTEGER REFERENCES accounts(id),
            montant INTEGER NOT NULL,
            transferred_by INTEGER REFERENCES users(id),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        "

    - name: üß™ Ex√©cution des tests de base
      run: npm run test

    - name: üß™ Ex√©cution des tests de r√©gression
      run: npm run test:regression

    - name: üìä Rapport de couverture
      run: |
        echo "‚úÖ Tests de non-r√©gression termin√©s avec succ√®s!"
        echo "üìã R√©sum√©:"
        echo "  ‚Ä¢ Test 1: Ajout d√©pense 1000 FCFA"
        echo "  ‚Ä¢ Test 2: Suppression d√©pense 1000 FCFA"
        echo "  ‚Ä¢ Test 3: Ajout cr√©ance 500 FCFA"
        echo "  ‚Ä¢ Test 4: Suppression cr√©ance 500 FCFA"  
        echo "  ‚Ä¢ Test 5: Ajout transfert 750 FCFA"
        echo "  ‚Ä¢ Test 6: Suppression transfert 750 FCFA"
        echo "  ‚Ä¢ V√©rification: Solde actuel = Solde Net"
        echo "  ‚Ä¢ V√©rification: Audit Flux = Solde Net"

    - name: üìß Notification en cas d'√©chec
      if: failure()
      run: |
        echo "‚ùå √âCHEC DES TESTS DE R√âGRESSION!"
        echo "Les tests de coh√©rence des comptes ont √©chou√©."
        echo "V√©rifiez les calculs de solde et la logique des transactions."
        exit 1
