================================================================================
     CORRECTION CRITIQUE - BUG CALCUL SOLDES COMPTES STATUT
================================================================================

üö® PROBL√àME IDENTIFI√â
================================================================================

Le calcul des soldes pour les comptes STATUT et DEPOT ignore les TRANSFERTS,
causant des montants incorrects dans le dashboard "D√©tail du Cash disponible".

SYMPT√îMES :
-----------
Si vous avez un compte statut qui re√ßoit ou √©met un transfert, le solde 
affich√© ne tient pas compte de ce transfert.

Exemple concret :
  Compte STATUT "Solde Courant Banque"
  - 03/10 : Snapshot dans special_credit_history = 100 000 FCFA
  - 06/10 : Transfert entrant = 500 000 FCFA
  
  ‚ùå Solde affich√© actuellement : 100 000 FCFA (incorrect, ignore le transfert)
  ‚úÖ Solde attendu : 500 000 FCFA (correct, le transfert REMPLACE le snapshot)


================================================================================
     LOGIQUE M√âTIER √Ä IMPL√âMENTER
================================================================================

R√àGLE FONDAMENTALE :
Pour les comptes STATUT, chaque cr√©dit ou transfert entrant REMPLACE 
le solde pr√©c√©dent (ne s'additionne pas).

FORMULE DE CALCUL :
-------------------
Solde = Dernier √âv√©nement Entrant (REMPLACE tout)
        - Transferts Sortants Post√©rieurs
        - D√©penses Post√©rieures

√âV√âNEMENTS ENTRANTS CONSID√âR√âS :
---------------------------------
1. Cr√©dits normaux (table credit_history)
2. Snapshots/cr√©dits sp√©ciaux (table special_credit_history avec is_balance_override = true)
3. Transferts ENTRANTS (table transfer_history avec destination_id = compte)

‚Üí Le syst√®me cherche le PLUS R√âCENT chronologiquement
‚Üí Ce montant REMPLACE tout ce qui pr√©c√®de


EXEMPLE D√âTAILL√â :
------------------
Compte : SOLDE COURANT BANQUE (type: statut)

Chronologie compl√®te :
  01/10 10:00 : Snapshot = 50 000 FCFA
  03/10 14:30 : Transfert entrant = 200 000 FCFA  ‚Üê DERNIER ENTRANT
  05/10 09:15 : Transfert sortant = -30 000 FCFA
  06/10 16:00 : D√©pense = -15 000 FCFA

Calcul :
  1Ô∏è‚É£ Dernier entrant (03/10) : 200 000 FCFA
  2Ô∏è‚É£ Transferts sortants apr√®s 03/10 : -30 000 FCFA
  3Ô∏è‚É£ D√©penses apr√®s 03/10 : -15 000 FCFA
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  TOTAL : 155 000 FCFA ‚úÖ

‚ö†Ô∏è Note : Le snapshot du 01/10 (50 000 FCFA) est IGNOR√â car le transfert 
du 03/10 est plus r√©cent et REMPLACE tout.


================================================================================
     INSTRUCTIONS DE SYNCHRONISATION
================================================================================

OPTION 1 : MERGE DEPUIS LE REPO PRINCIPAL (Recommand√©)
-------------------------------------------------------

# 1. Ajouter le repo principal comme remote (si pas d√©j√† fait)
git remote add upstream https://github.com/Zalint/MATA_DEPENSES_MANAGEMENT.git

# 2. R√©cup√©rer les derni√®res modifications
git fetch upstream

# 3. Voir les commits √† merger
git log upstream/main --oneline -10

# 4. Merger les changements (commit abcd871)
git checkout main
git merge upstream/main

# 5. En cas de conflits, les r√©soudre puis :
git add .
git commit -m "Merge upstream - Correction calcul soldes comptes statut"

# 6. Push vers votre fork
git push origin main


OPTION 2 : CHERRY-PICK DU COMMIT SP√âCIFIQUE
--------------------------------------------

# Si vous voulez uniquement cette correction sans tout merger
git fetch upstream
git cherry-pick abcd871
git push origin main


OPTION 3 : APPLIQUER MANUELLEMENT LES CHANGEMENTS
--------------------------------------------------

Si vous avez modifi√© server.js, vous devrez peut-√™tre appliquer manuellement.

Fichier √† modifier : server.js (environ lignes 2356-2454)

Section √† remplacer : Le CASE WHEN 'statut' THEN dans la requ√™te 
accountBurnQuery de /api/dashboard/stats

Voir la section "CODE SQL √Ä APPLIQUER" ci-dessous.


================================================================================
     CODE SQL √Ä APPLIQUER
================================================================================

Dans server.js, route /api/dashboard/stats, remplacer le calcul pour 
comptes STATUT par :

WHEN 'statut' THEN
    -- Pour STATUT : dernier cr√©dit/transfert entrant REMPLACE, puis soustraction des sorties/d√©penses
    (
        -- 1. Trouver le dernier montant entrant (cr√©dit, special_credit, OU transfert entrant)
        COALESCE((
            SELECT montant FROM (
                -- Cr√©dits normaux
                SELECT amount as montant, created_at as date_operation
                FROM credit_history 
                WHERE account_id = a.id 
                    AND created_at <= ($2::date + INTERVAL '1 day')
                
                UNION ALL
                
                -- Snapshots / cr√©dits sp√©ciaux
                SELECT amount as montant, created_at as date_operation
                FROM special_credit_history 
                WHERE account_id = a.id 
                    AND credit_date <= ($2::date + INTERVAL '1 day')
                    AND is_balance_override = true
                
                UNION ALL
                
                -- Transferts ENTRANTS uniquement
                SELECT montant, created_at as date_operation
                FROM transfer_history
                WHERE destination_id = a.id
                    AND created_at <= ($2::date + INTERVAL '1 day')
            ) all_incoming
            ORDER BY date_operation DESC
            LIMIT 1
        ), 0)
        -
        -- 2. Soustraire les transferts SORTANTS post√©rieurs au dernier entrant
        COALESCE((
            SELECT SUM(th.montant)
            FROM transfer_history th
            WHERE th.source_id = a.id
                AND th.created_at > COALESCE((
                    SELECT date_operation FROM (
                        SELECT created_at as date_operation
                        FROM credit_history 
                        WHERE account_id = a.id 
                            AND created_at <= ($2::date + INTERVAL '1 day')
                        
                        UNION ALL
                        
                        SELECT created_at as date_operation
                        FROM special_credit_history 
                        WHERE account_id = a.id 
                            AND credit_date <= ($2::date + INTERVAL '1 day')
                            AND is_balance_override = true
                        
                        UNION ALL
                        
                        SELECT created_at as date_operation
                        FROM transfer_history
                        WHERE destination_id = a.id
                            AND created_at <= ($2::date + INTERVAL '1 day')
                    ) all_incoming
                    ORDER BY date_operation DESC
                    LIMIT 1
                ), '1900-01-01'::timestamp)
                AND th.created_at <= ($2::date + INTERVAL '1 day')
        ), 0)
        -
        -- 3. Soustraire les d√©penses post√©rieures au dernier entrant
        COALESCE((
            SELECT SUM(e2.total)
            FROM expenses e2
            WHERE e2.account_id = a.id
                AND e2.expense_date > COALESCE((
                    SELECT date_operation::date FROM (
                        SELECT created_at as date_operation
                        FROM credit_history 
                        WHERE account_id = a.id 
                            AND created_at <= ($2::date + INTERVAL '1 day')
                        
                        UNION ALL
                        
                        SELECT created_at as date_operation
                        FROM special_credit_history 
                        WHERE account_id = a.id 
                            AND credit_date <= ($2::date + INTERVAL '1 day')
                            AND is_balance_override = true
                        
                        UNION ALL
                        
                        SELECT created_at as date_operation
                        FROM transfer_history
                        WHERE destination_id = a.id
                            AND created_at <= ($2::date + INTERVAL '1 day')
                    ) all_incoming
                    ORDER BY date_operation DESC
                    LIMIT 1
                ), '1900-01-01'::date)
                AND e2.expense_date <= ($2::date + INTERVAL '1 day')
        ), 0)
    )


================================================================================
     SCRIPT DE DIAGNOSTIC RAPIDE
================================================================================

Ex√©cutez ce script AVANT et APR√àS la correction pour identifier les 
comptes affect√©s :

-- Identifier les comptes statut avec transferts apr√®s leur dernier snapshot
SELECT 
    a.id,
    a.account_name,
    a.current_balance as solde_actuel_db,
    (
        SELECT COUNT(*)
        FROM transfer_history th
        WHERE (th.source_id = a.id OR th.destination_id = a.id)
            AND th.created_at > (
                SELECT MAX(created_at)
                FROM special_credit_history 
                WHERE account_id = a.id AND is_balance_override = true
            )
    ) as nb_transferts_ignores
FROM accounts a
WHERE a.account_type IN ('statut', 'depot') 
    AND a.is_active = true
    AND EXISTS (
        SELECT 1 
        FROM transfer_history th 
        WHERE th.source_id = a.id OR th.destination_id = a.id
    )
ORDER BY nb_transferts_ignores DESC;

INTERPR√âTATION :
Si nb_transferts_ignores > 0, ces comptes sont affect√©s par le bug.


================================================================================
     SCRIPT DE TEST D√âTAILL√â POUR UN COMPTE
================================================================================

Remplacez XXX par l'ID d'un de vos comptes statut pour voir le d√©tail :

WITH compte_test AS (
    SELECT 
        id, 
        account_name, 
        account_type,
        current_balance
    FROM accounts 
    WHERE id = XXX  -- ‚Üê Remplacer par l'ID de votre compte
)
SELECT 
    'Compte test√©' as etape,
    ct.account_name as info,
    ct.current_balance as montant
FROM compte_test ct

UNION ALL

SELECT 
    '1Ô∏è‚É£ Tous les √©v√©nements ENTRANTS' as etape,
    CONCAT(
        TO_CHAR(date_operation, 'DD/MM/YYYY HH24:MI'), 
        ' - ', 
        source, 
        ' : ', 
        TO_CHAR(montant, 'FM999,999,999')
    ) as info,
    montant
FROM (
    SELECT 
        created_at as date_operation,
        'credit_history' as source,
        amount as montant
    FROM credit_history 
    WHERE account_id = XXX
    
    UNION ALL
    
    SELECT 
        created_at as date_operation,
        'special_credit_history' as source,
        amount as montant
    FROM special_credit_history 
    WHERE account_id = XXX AND is_balance_override = true
    
    UNION ALL
    
    SELECT 
        created_at as date_operation,
        'transfer_IN' as source,
        montant
    FROM transfer_history
    WHERE destination_id = XXX
) all_events
ORDER BY date_operation DESC

UNION ALL

SELECT 
    'üëë DERNIER ENTRANT (base du calcul)' as etape,
    CONCAT(
        TO_CHAR(date_operation, 'DD/MM/YYYY HH24:MI'), 
        ' - ', 
        source
    ) as info,
    montant
FROM (
    SELECT 
        created_at as date_operation,
        'credit_history' as source,
        amount as montant
    FROM credit_history 
    WHERE account_id = XXX
    
    UNION ALL
    
    SELECT 
        created_at as date_operation,
        'special_credit_history' as source,
        amount as montant
    FROM special_credit_history 
    WHERE account_id = XXX AND is_balance_override = true
    
    UNION ALL
    
    SELECT 
        created_at as date_operation,
        'transfer_IN' as source,
        montant
    FROM transfer_history
    WHERE destination_id = XXX
) all_events
ORDER BY date_operation DESC
LIMIT 1

UNION ALL

SELECT 
    '2Ô∏è‚É£ Transferts SORTANTS apr√®s dernier entrant' as etape,
    CONCAT(TO_CHAR(th.created_at, 'DD/MM/YYYY HH24:MI'), ' - Transfert OUT') as info,
    -th.montant as montant
FROM transfer_history th
WHERE th.source_id = XXX
    AND th.created_at > (
        SELECT date_operation FROM (
            SELECT created_at as date_operation
            FROM credit_history 
            WHERE account_id = XXX
            
            UNION ALL
            
            SELECT created_at as date_operation
            FROM special_credit_history 
            WHERE account_id = XXX AND is_balance_override = true
            
            UNION ALL
            
            SELECT created_at as date_operation
            FROM transfer_history
            WHERE destination_id = XXX
        ) all_incoming
        ORDER BY date_operation DESC
        LIMIT 1
    )
ORDER BY th.created_at

UNION ALL

SELECT 
    '3Ô∏è‚É£ D√©penses apr√®s dernier entrant' as etape,
    CONCAT(TO_CHAR(e.expense_date, 'DD/MM/YYYY'), ' - ', COALESCE(e.description, 'Sans description')) as info,
    -e.total as montant
FROM expenses e
WHERE e.account_id = XXX
    AND e.expense_date > (
        SELECT date_operation::date FROM (
            SELECT created_at as date_operation
            FROM credit_history 
            WHERE account_id = XXX
            
            UNION ALL
            
            SELECT created_at as date_operation
            FROM special_credit_history 
            WHERE account_id = XXX AND is_balance_override = true
            
            UNION ALL
            
            SELECT created_at as date_operation
            FROM transfer_history
            WHERE destination_id = XXX
        ) all_incoming
        ORDER BY date_operation DESC
        LIMIT 1
    )
ORDER BY e.expense_date

UNION ALL

SELECT 
    'üí∞ SOLDE CALCUL√â' as etape,
    'Nouveau calcul avec correction' as info,
    (
        COALESCE((
            SELECT montant FROM (
                SELECT created_at as date_operation, amount as montant
                FROM credit_history 
                WHERE account_id = XXX
                
                UNION ALL
                
                SELECT created_at as date_operation, amount as montant
                FROM special_credit_history 
                WHERE account_id = XXX AND is_balance_override = true
                
                UNION ALL
                
                SELECT created_at as date_operation, montant
                FROM transfer_history
                WHERE destination_id = XXX
            ) all_incoming
            ORDER BY date_operation DESC
            LIMIT 1
        ), 0)
        -
        COALESCE((
            SELECT SUM(th.montant)
            FROM transfer_history th
            WHERE th.source_id = XXX
                AND th.created_at > (
                    SELECT date_operation FROM (
                        SELECT created_at as date_operation
                        FROM credit_history 
                        WHERE account_id = XXX
                        
                        UNION ALL
                        
                        SELECT created_at as date_operation
                        FROM special_credit_history 
                        WHERE account_id = XXX AND is_balance_override = true
                        
                        UNION ALL
                        
                        SELECT created_at as date_operation
                        FROM transfer_history
                        WHERE destination_id = XXX
                    ) all_incoming
                    ORDER BY date_operation DESC
                    LIMIT 1
                )
        ), 0)
        -
        COALESCE((
            SELECT SUM(e.total)
            FROM expenses e
            WHERE e.account_id = XXX
                AND e.expense_date > (
                    SELECT date_operation::date FROM (
                        SELECT created_at as date_operation
                        FROM credit_history 
                        WHERE account_id = XXX
                        
                        UNION ALL
                        
                        SELECT created_at as date_operation
                        FROM special_credit_history 
                        WHERE account_id = XXX AND is_balance_override = true
                        
                        UNION ALL
                        
                        SELECT created_at as date_operation
                        FROM transfer_history
                        WHERE destination_id = XXX
                    ) all_incoming
                    ORDER BY date_operation DESC
                    LIMIT 1
                )
        ), 0)
    ) as montant;


================================================================================
     POINTS D'ATTENTION
================================================================================

1. PAS DE MIGRATION DE DONN√âES N√âCESSAIRE
   Cette correction modifie uniquement la logique de calcul.
   Aucune modification de sch√©ma de base de donn√©es n'est requise.

2. RED√âMARRAGE DU SERVEUR
   Apr√®s avoir appliqu√© les changements :
   pm2 restart app  # ou votre m√©thode de restart

3. VIDER LE CACHE NAVIGATEUR
   Les utilisateurs devront peut-√™tre vider leur cache :
   Chrome/Edge : Ctrl + Shift + R
   Firefox : Ctrl + Shift + Delete

4. COMPTES AFFECT√âS
   Seuls les comptes de type STATUT et DEPOT sont concern√©s.
   Les comptes CLASSIQUE, PARTENAIRE, et CREANCE ne changent pas.

5. PERFORMANCE
   La nouvelle requ√™te utilise des sous-requ√™tes optimis√©es avec LIMIT 1.
   L'impact sur les performances devrait √™tre minimal.


================================================================================
     IMPACT ATTENDU
================================================================================

AVANT LA CORRECTION :
---------------------
Les comptes statut qui ont :
  ‚úÖ Un snapshot dans special_credit_history
  ‚úÖ Des transferts APR√àS ce snapshot
  ‚Üí Affichent un solde incorrect (ignore les transferts)

APR√àS LA CORRECTION :
---------------------
  ‚úÖ Le dernier √©v√©nement entrant (cr√©dit OU transfert) est pris en compte
  ‚úÖ Ce montant REMPLACE le solde pr√©c√©dent
  ‚úÖ Les transferts sortants et d√©penses post√©rieurs sont soustraits
  ‚úÖ Le "D√©tail du Cash disponible" affiche le bon solde


================================================================================
     CHECKLIST DE D√âPLOIEMENT
================================================================================

[ ] Fork synchronis√© ou modifications appliqu√©es manuellement
[ ] Script de diagnostic SQL ex√©cut√© (avant correction)
[ ] Comptes affect√©s identifi√©s et document√©s
[ ] Code modifi√© dans server.js
[ ] Application red√©marr√©e
[ ] Script de diagnostic SQL r√©ex√©cut√© (apr√®s correction)
[ ] Validation visuelle dans le dashboard
[ ] "D√©tail du Cash disponible" v√©rifi√© pour plusieurs comptes
[ ] Tests de non-r√©gression pass√©s (si disponibles)
[ ] Utilisateurs inform√©s du changement
[ ] Documentation mise √† jour


================================================================================
     EN CAS DE PROBL√àME
================================================================================

LES SOLDES SEMBLENT TOUJOURS INCORRECTS
----------------------------------------
1. ‚úÖ V√©rifier que le serveur a bien red√©marr√© avec le nouveau code
2. ‚úÖ Vider le cache du navigateur (Ctrl+Shift+R)
3. ‚úÖ Ex√©cuter le script de diagnostic SQL pour un compte sp√©cifique
4. ‚úÖ V√©rifier les logs serveur pour des erreurs SQL

ERREUR SQL LORS DU D√âMARRAGE
-----------------------------
1. ‚úÖ V√©rifier que la syntaxe SQL est exacte (parenth√®ses, virgules)
2. ‚úÖ V√©rifier que les noms de tables sont corrects dans votre sch√©ma
3. ‚úÖ Tester la requ√™te isol√©ment dans pgAdmin ou psql

DIFF√âRENCES DE CALCUL IMPORTANTES
----------------------------------
C'est normal ! Si les transferts √©taient ignor√©s avant, les soldes vont 
changer significativement. Utilisez le script de diagnostic pour comprendre 
les diff√©rences.


================================================================================
     INFORMATIONS DE SUPPORT
================================================================================

Repo principal : https://github.com/Zalint/MATA_DEPENSES_MANAGEMENT
Commit de r√©f√©rence : abcd871
Version du guide : 1.0
Date : 07 octobre 2025

Tests de non-r√©gression : 26/26 PASS√âS ‚úÖ

Pour toute question :
1. Consulter la documentation dans CORRECTION_COMPTES_STATUT_TRANSFERTS.md
2. Ex√©cuter les scripts de diagnostic fournis
3. V√©rifier les logs serveur
4. Contacter l'√©quipe de d√©veloppement du repo principal


================================================================================
     URGENCE ET PRIORIT√â
================================================================================

‚ö†Ô∏è  IMPACT : Soldes incorrects dans le dashboard pour comptes statut/depot
üéØ  COMPTES AFFECT√âS : Tous les comptes statut/depot avec transferts
‚úÖ  CORRECTION TEST√âE : 26/26 tests pass√©s en production
üöÄ  TEMPS D'APPLICATION : 15-30 minutes
‚è∞  PRIORIT√â : HAUTE - Affecte la fiabilit√© des donn√©es financi√®res

================================================================================
FIN DU DOCUMENT
================================================================================

